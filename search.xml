<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Full step to create a docker registry server with cert&auth]]></title>
      <url>/2018/01/29/Full-step-to-create-a-docker-registry-server-with-cert-auth/</url>
      <content type="html"><![CDATA[<ol>
<li>centos iso:</li>
</ol>
<p><a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1708.iso" target="_blank" rel="noopener">http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-Minimal-1708.iso</a></p>
<ol>
<li>get docker:  </li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-selinux \</span><br><span class="line">                docker-engine</span><br><span class="line"></span><br><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">        https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">sudo yum-config-manager --enable docker-ce-edge</span><br><span class="line"></span><br><span class="line">sudo yum install docker-ce</span><br><span class="line"></span><br><span class="line">sudo systemctl enable docker</span><br><span class="line"></span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>
<ol>
<li>generate cert &amp; auth &amp; run</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/certs</span><br><span class="line">sudo mkdir /opt/auth</span><br><span class="line">sudo mkdir /opt/registry</span><br><span class="line"></span><br><span class="line">openssl req -newkey rsa:4096 -nodes \</span><br><span class="line">    -sha256 \</span><br><span class="line">    -keyout /opt/certs/domain.key \</span><br><span class="line">    -x509 -days 10000 \</span><br><span class="line">    -extensions SAN \</span><br><span class="line">    -config &lt;(cat ~/openssl.cnf \</span><br><span class="line">    &lt;(printf &quot;[SAN]\nsubjectAltName=DNS.1:xx.com,DNS.2:registry.xx.com,DNS.3:*.xx.com&quot;)) \</span><br><span class="line">    -out /opt/certs/domain.crt</span><br></pre></td></tr></table></figure>
<blockquote>
<p>################detail#################<br>Country Name (2 letter code) [XX]:CN<br>State or Province Name (full name) []:BeiJing<br>Locality Name (eg, city) [Default City]:BeJing<br>Organization Name (eg, company) [Default Company Ltd]:xx<br>Organizational Unit Name (eg, section) []:docker<br>Common Name (eg, your name or your server’s hostname) []:xx.com<br>Email Address []:xx@xx.com</p>
<p>######################################</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --entrypoint htpasswd \</span><br><span class="line">  --rm \</span><br><span class="line">  registry:2 -Bbn admin 000000 &gt; /opt/auth/htpasswd</span><br><span class="line"></span><br><span class="line">mkdir -p /etc/docker/certs.d/registry.xx.com:5000</span><br><span class="line"></span><br><span class="line">cp /opt/certs/* /etc/docker/certs.d/registry.xx.com:5000</span><br><span class="line"></span><br><span class="line">cd /etc/docker/certs.d/registry.xx.com:5000</span><br><span class="line"></span><br><span class="line">mv domain.crt ca.crt</span><br><span class="line">mv domain.key client.key</span><br><span class="line">cp ca.crt client.cert</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>vi /etc/hosts</p>
<blockquote>
<p>####################<br>registry.xx.com xx.xx.xx.xx</p>
<p>####################</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -p 5000:5000 \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --name registry \</span><br><span class="line">  -v /opt/auth:/auth \</span><br><span class="line">  -e &quot;REGISTRY_AUTH=htpasswd&quot; \</span><br><span class="line">  -e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \</span><br><span class="line">  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \</span><br><span class="line">  -v /opt/certs:/certs \</span><br><span class="line">  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \</span><br><span class="line">  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \</span><br><span class="line">  -v /opt/registry:/var/lib/registry \</span><br><span class="line">  registry</span><br></pre></td></tr></table></figure>
<ol>
<li>stop firewall &amp; selinux</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service </span><br><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure>
<blockquote>
<p>##########################<br>SELINUX=enforcing -&gt; SELINUX=disabled</p>
<p>##########################<br><code>reboot</code></p>
</blockquote>
<ol>
<li>login</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login registry.xx.com:5000</span><br><span class="line">admin</span><br><span class="line">000000</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Authenticate proxy with nginx]]></title>
      <url>/2018/01/29/Authenticate-proxy-with-nginx/</url>
      <content type="html"><![CDATA[<h2 id="Use-case"><a href="#Use-case" class="headerlink" title="Use-case"></a>Use-case</h2><p>People already relying on a nginx proxy to authenticate their users to other services might want to leverage it and have Registry communications tunneled through the same pipeline.</p>
<p>Usually, that includes enterprise setups using LDAP/AD on the backend and a SSO mechanism fronting their internal http portal.</p>
<h2 id="Alternatives"><a href="#Alternatives" class="headerlink" title="Alternatives"></a>Alternatives</h2><p>If you just want authentication for your registry, and are happy maintaining users access separately, you should really consider sticking with the native basic auth registry feature.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>With the method presented here, you implement basic authentication for docker engines in a reverse proxy that sits in front of your registry.</p>
<p>While we use a simple htpasswd file as an example, any other nginx authentication backend should be fairly easy to implement once you are done with the example.</p>
<p>We also implement push restriction (to a limited user group) for the sake of the example. Again, you should modify this to fit your mileage.</p>
<h2 id="Gotchas"><a href="#Gotchas" class="headerlink" title="Gotchas"></a>Gotchas</h2><p>While this model gives you the ability to use whatever authentication backend you want through the secondary authentication mechanism implemented inside your proxy, it also requires that you move TLS termination from the Registry to the proxy itself.</p>
<p>Furthermore, introducing an extra http layer in your communication pipeline will make it more complex to deploy, maintain, and debug, and will possibly create issues. Make sure the extra complexity is required.</p>
<p>For instance, Amazon’s Elastic Load Balancer (ELB) in HTTPS mode already sets the following client header:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X-Real-IP</span><br><span class="line">X-Forwarded-For</span><br><span class="line">X-Forwarded-Proto</span><br></pre></td></tr></table></figure>
<p>So if you have an Nginx instance sitting behind it, remove these lines from the example config below:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header  Host              $http_host;   # required for docker client&apos;s sake</span><br><span class="line">proxy_set_header  X-Real-IP         $remote_addr; # pass on real client&apos;s IP</span><br><span class="line">proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header  X-Forwarded-Proto $scheme;</span><br></pre></td></tr></table></figure></p>
<p>Otherwise Nginx will reset the ELB’s values, and the requests will not be routed properly. For more information, see #970.</p>
<p>Setting things up<br>Review the requirements, then follow these steps.</p>
<ol>
<li><p>Create the required directories</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p auth data</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the main nginx configuration you will use. Paste this code block into a new file called auth/nginx.conf:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">  upstream docker-registry &#123;</span><br><span class="line">    server registry:5000;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ## Set a variable to help us decide if we need to add the</span><br><span class="line">  ## &apos;Docker-Distribution-Api-Version&apos; header.</span><br><span class="line">  ## The registry always sets this header.</span><br><span class="line">  ## In the case of nginx performing auth, the header will be unset</span><br><span class="line">  ## since nginx is auth-ing before proxying.</span><br><span class="line">  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version &#123;</span><br><span class="line">    &apos;&apos; &apos;registry/2.0&apos;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name myregistrydomain.com;</span><br><span class="line"></span><br><span class="line">    # SSL</span><br><span class="line">    ssl_certificate /etc/nginx/conf.d/domain.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/conf.d/domain.key;</span><br><span class="line"></span><br><span class="line">    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html</span><br><span class="line">    ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers &apos;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH&apos;;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line"></span><br><span class="line">    # disable any limits to avoid HTTP 413 for large image uploads</span><br><span class="line">    client_max_body_size 0;</span><br><span class="line"></span><br><span class="line">    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)</span><br><span class="line">    chunked_transfer_encoding on;</span><br><span class="line"></span><br><span class="line">    location /v2/ &#123;</span><br><span class="line">      # Do not allow connections from docker 1.5 and earlier</span><br><span class="line">      # docker pre-1.6.0 did not properly set the user agent on ping, catch &quot;Go *&quot; user agents</span><br><span class="line">      if ($http_user_agent ~ &quot;^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$&quot; ) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      # To add basic authentication to v2 use auth_basic setting.</span><br><span class="line">      auth_basic &quot;Registry realm&quot;;</span><br><span class="line">      auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;</span><br><span class="line"></span><br><span class="line">      ## If $docker_distribution_api_version is empty, the header will not be added.</span><br><span class="line">      ## See the map directive above where this variable is defined.</span><br><span class="line">      add_header &apos;Docker-Distribution-Api-Version&apos; $docker_distribution_api_version always;</span><br><span class="line"></span><br><span class="line">      proxy_pass                          http://docker-registry;</span><br><span class="line">      proxy_set_header  Host              $http_host;   # required for docker client&apos;s sake</span><br><span class="line">      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client&apos;s IP</span><br><span class="line">      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;</span><br><span class="line">      proxy_set_header  X-Forwarded-Proto $scheme;</span><br><span class="line">      proxy_read_timeout                  900;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a password file auth/nginx.htpasswd for “testuser” and “testpassword”.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm --entrypoint htpasswd registry:2 -Bbn testuser testpassword &gt; auth/nginx.htpasswd</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>Note: If you do not want to use bcrypt, you can omit the -B parameter.</p>
</blockquote>
<ol>
<li><p>Copy your certificate files to the auth/ directory.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp domain.crt auth</span><br><span class="line">$ cp domain.key auth</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the compose file. Paste the following YAML into a new file called docker-compose.yml.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">nginx:</span><br><span class="line">  # Note : Only nginx:alpine supports bcrypt.</span><br><span class="line">  # If you don&apos;t need to use bcrypt, you can use a different tag.</span><br><span class="line">  # Ref. https://github.com/nginxinc/docker-nginx/issues/29</span><br><span class="line">  image: &quot;nginx:alpine&quot;</span><br><span class="line">  ports:</span><br><span class="line">    - 5043:443</span><br><span class="line">  links:</span><br><span class="line">    - registry:registry</span><br><span class="line">  volumes:</span><br><span class="line">    - ./auth:/etc/nginx/conf.d</span><br><span class="line">    - ./auth/nginx.conf:/etc/nginx/nginx.conf:ro</span><br><span class="line"></span><br><span class="line">registry:</span><br><span class="line">  image: registry:2</span><br><span class="line">  ports:</span><br><span class="line">    - 127.0.0.1:5000:5000</span><br><span class="line">  volumes:</span><br><span class="line">    - ./data:/var/lib/registry</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Starting-and-stopping"><a href="#Starting-and-stopping" class="headerlink" title="Starting and stopping"></a>Starting and stopping</h2><p>Now, start your stack:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p>
<p>Login with a “push” authorized user (using testuser and testpassword), then tag and push your first image:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker login -u=testuser -p=testpassword -e=root@example.ch myregistrydomain.com:5043</span><br><span class="line">docker tag ubuntu myregistrydomain.com:5043/test</span><br><span class="line">docker push myregistrydomain.com:5043/test</span><br><span class="line">docker pull myregistrydomain.com:5043/test</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简易docker私有仓库搭建]]></title>
      <url>/2018/01/29/%E7%AE%80%E6%98%93docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<ol>
<li><p>create certs:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">openssl req -newkey rsa:4096 -nodes \</span><br><span class="line">    -sha256 \</span><br><span class="line">    -keyout /opt/certs/domain.key \</span><br><span class="line">    -x509 -days 10000 \</span><br><span class="line">    -extensions SAN \</span><br><span class="line">    -config &lt;(cat ~/openssl.cnf \</span><br><span class="line">        &lt;(<span class="built_in">printf</span> <span class="string">"[SAN]\nsubjectAltName=DNS.1:xx.com,DNS.2:registry.xx.com,DNS.3:*.xx.com"</span>)) \</span><br><span class="line">    -out /opt/certs/domain.crt</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a password file with one entry for the user testuser, with password testpassword:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --entrypoint htpasswd \</span><br><span class="line">  registry:2 -Bbn testuser testpassword &gt; /opt/auth/htpasswd</span><br></pre></td></tr></table></figure>
</li>
<li><p>Start the registry with basic authentication.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -p 5000:5000 \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --name registry \</span><br><span class="line">  -v /opt/auth:/auth \</span><br><span class="line">  -e <span class="string">"REGISTRY_AUTH=htpasswd"</span> \</span><br><span class="line">  -e <span class="string">"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm"</span> \</span><br><span class="line">  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \</span><br><span class="line">  -v /opt/certs:/certs \</span><br><span class="line">  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \</span><br><span class="line">  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \</span><br><span class="line">  -v /opt/registry:/var/lib/registry \</span><br><span class="line">  registry</span><br></pre></td></tr></table></figure>
</li>
<li><p>import certs on client:  </p>
<blockquote>
<p>NOTE:  host with port</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/certs.d/        &lt;-- Certificate directory</span><br><span class="line">    └── localhost:5000          &lt;-- Hostname:port</span><br><span class="line">       ├── client.cert          &lt;-- Client certificate</span><br><span class="line">       ├── client.key           &lt;-- Client key</span><br><span class="line">       └── ca.crt               &lt;-- Certificate authority that signed</span><br><span class="line">                                    the registry certificate</span><br></pre></td></tr></table></figure>
<blockquote>
<p>NOTE:  host without port</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/certs.d/</span><br><span class="line">  └── my-https.registry.example.com          &lt;-- Hostname without port</span><br><span class="line">     ├── client.cert (same file as ca.crt)</span><br><span class="line">     ├── client.key</span><br><span class="line">     └── ca.crt</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker必须使用sudo操作的解决方案]]></title>
      <url>/2018/01/29/Docker%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8sudo%E6%93%8D%E4%BD%9C%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<ol>
<li>创建docker组：<code>sudo groupadd docker</code>  </li>
<li>将当前用户加入docker组：<code>sudo gpasswd -a ${USER} docker</code>  </li>
<li>重启服务：<code>sudo service docker restart</code>  </li>
<li>刷新docker成员：<code>newgrp - docker</code>  </li>
</ol>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用docker环境变量配置java 项目配置文件]]></title>
      <url>/2018/01/29/%E7%94%A8docker%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AEjava-%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>解决方法</p>
<blockquote>
<p>ENV CATALINA_OPTS=”-Dkey=value”</p>
</blockquote>
<p>例子：<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> tomcat:<span class="number">8.0</span>-jre8</span><br><span class="line"><span class="keyword">ENV</span> spring.profiles.active=dev </span><br><span class="line"><span class="keyword">ENV</span> CATALINA_OPTS=<span class="string">"-Dkey=value"</span></span><br><span class="line"><span class="keyword">ADD</span> myWar.war /usr/local/tomcat/webapps/</span><br><span class="line">CMD ["catalina.sh", "run"]</span><br></pre></td></tr></table></figure></p>
<p>多个参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV CATALINA_OPTS=&quot;-DDB_URL=$&#123;DB_URL&#125; -DUSR=$&#123;DB_USR&#125; -DPASS=$&#123;DB_PW&#125;&quot;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[links]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[gallery]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[timeline]]></title>
      <url>/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
